CREATE TABLE `message` (
  id INTEGER NOT NULL,
  localId TEXT NOT NULL PRIMARY KEY,
  conversation INTEGER NOT NULL,
  sender TEXT NOT NULL,
  message TEXT NOT NULL,
  stickerUrl TEXT NOT NULL,
  attachments TEXT NOT NULL,
  type TEXT NOT NULL,
  status TEXT NOT NULL,
  seenBy TEXT NOT NULL,
  leftParticipants TEXT NOT NULL,
  joinParticipants TEXT NOT NULL,
  reactions TEXT NOT NULL,
  replyToMessage TEXT,
  isDeleted INTEGER AS Boolean NOT NULL DEFAULT 0,
  created_at INTEGER NOT NULL DEFAULT 0,
  updated_at INTEGER NOT NULL DEFAULT 0,

  FOREIGN KEY (conversation) REFERENCES conversation(id),
  FOREIGN KEY (sender) REFERENCES user(id)
);

findById:
SELECT *
FROM `message`
WHERE id = :id;

findAllByConversation:
SELECT *
FROM `message`
WHERE conversation = :conversation_id
ORDER BY created_at DESC;

findByConversation:
SELECT *
FROM `message`
WHERE conversation = :conversation_id
ORDER BY created_at DESC
LIMIT :limit;

upsert {
  UPDATE `message`
  SET id = :id,
      message = :message,
      stickerUrl = :stickerUrl,
      attachments = :attachments,
      status = :status,
      seenBy= :seenBy,
      leftParticipants=: leftParticipants,
      joinParticipants=:joinParticipants,
      reactions=:reactions,
      replyToMessage=:replyToMessage,
      isDeleted=:isDeleted,
      created_at=:created_at,
      updated_at = :updated_at
  WHERE (id != 0 AND id = :id) OR (id = 0 AND localId = :localId);

  INSERT OR IGNORE INTO `message`(
    id,
    localId,
    conversation,
    sender,
    message,
    stickerUrl,
    attachments,
    type,
    status,
    seenBy,
    leftParticipants,
    joinParticipants,
    reactions,
    replyToMessage,
    isDeleted,
    created_at,
    updated_at
  )
  VALUES (
    :id,
    :localId,
    :conversation,
    :sender,
    :message,
    :stickerUrl,
    :attachments,
    :type,
    :status,
    :seenBy,
    :leftParticipants,
    :joinParticipants,
    :reactions,
    :replyToMessage,
    :isDeleted,
    :created_at,
    :updated_at
  );
}

getMessageById:
SELECT *
FROM `message`
WHERE id = :id
ORDER BY created_at DESC
LIMIT :limit;


deleteAllByConversation:
DELETE FROM `message`
WHERE conversation = :conversation_id;

deleteById:
DELETE FROM `message`
WHERE id = :id;

deleteAll:
DELETE FROM `message`;